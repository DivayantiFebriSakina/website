# -*- coding: utf-8 -*-
"""Webfix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x-HRcUd0J5Q0uMltA3o9-2rMTIlUTidq
"""

import streamlit as st
from PIL import Image
import pandas as pd
import numpy as np
import calendar
import matplotlib.pyplot as plt
from tensorflow import keras
import io
import base64
import joblib
from tensorflow.keras.models import load_model
from scipy import stats
from datetime import datetime
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.preprocessing import MinMaxScaler

st.sidebar.title("Prediksi Harga Telur Ayam Ras Jawa Tengah")
menu = st.sidebar.radio("Navigasi", ["About", "Upload Data", 'Praproses Data', 'Analisis Deskriptif Dan Visualisasi Data', 'Pemodelan Hybrid ARIMAX-LSTM', 'Prediksi Masa Depan'])
st.sidebar.header("Informasi")
st.sidebar.info("""
    Model yang digunakan:
    - ARIMAX (2,0,0)
    - LSTM 1 Layer, Dengan 32 Neuron dan Optimazer ADAM
""")

if menu == "About":
  def show_about_page():
    st.set_page_config(page_title="Tentang Aplikasi", layout="wide")

    # Bagian 1: Header dengan Logo
    col1, col2 = st.columns([1, 4])

    with col1:
        # Pastikan file 'logo_jateng.png' ada di direktori yang sama
        try:
            logo_jateng = Image.open('logo_jateng.png')
            st.image(logo_jateng, width=150)
        except:
            st.warning("Logo tidak ditemukan")

    with col2:
        st.title("üìù Tentang Aplikasi Prediksi Harga Telur Ayam Ras")

    st.markdown("---")

    st.markdown("""
    ## üéØ Tujuan Aplikasi
    Aplikasi ini dikembangkan untuk memprediksi harga telur ayam ras di Jawa Tengah dengan mempertimbangkan berbagai faktor eksternal
    yang memengaruhi fluktuasi harganya.
    """)

    st.markdown("""
    ## üîç Cakupan Data
    **Sumber Data:**
    - Data resmi dari [Pusat Informasi Harga Pangan Strategis (PIHPS)](https://www.bi.go.id/hargapangan)

    **Periode Data:**
    - Januari 2019 hingga Desember 2024

    **Lokasi:**
    - Wilayah Jawa Tengah
    """)

    st.markdown("""
    ## üìä Faktor yang Dipertimbangkan
    Aplikasi ini melakukan prediksi mempertimbangkan beberapa faktor eksternal dalam prediksi harga telur:

    - **Harga Telur Ayam Ras** (Variabel Target)
    - **Harga Daging Ayam** (Faktor Eksternal)
    - **Harga Daging Sapi** (Faktor Eksternal)
    - **Libur Nasional** (Faktor Eksternal)
    """)

    st.markdown("""
    ## üß† Metode Prediksi
    Sistem prediksi menggunakan pemodelan Hybrid ARIMAX-LSTM
    """)

    st.markdown("""
    ## üë®‚Äçüíª Pengembang
    Aplikasi ini dikembangkan oleh:
    - [Divayanti Febri Sakina]
    - [divayantiferbisakina20@gmail.com]
    """)

    st.markdown("""
    ## üìú Lisensi
    Aplikasi ini bersifat open-source dan dapat dikembangkan lebih lanjut oleh pihak yang berkepentingan.
    """)

  if __name__ == "__main__":
    show_about_page()

# Upload Data
elif menu == "Upload Data":
    st.header("Upload Dataset")
    uploaded_file = st.file_uploader(
        "Upload File Excel Dengan Kolom: Tanggal, Harga_Telur, Harga_Daging_Ayam, Harga_Daging_Sapi, Libur_Nasional",
        type=['xlsx'])

    if uploaded_file is not None:
        df = pd.read_excel(uploaded_file)

        # Validasi kolom yang dibutuhkan
        required_cols = ['Tanggal', 'Harga_Telur', 'Harga_Daging_Ayam', 'Harga_Daging_Sapi', 'Libur_Nasional']
        missing_cols = [col for col in required_cols if col not in df.columns]

        if missing_cols:
            st.error(f"Kolom yang diperlukan tidak ditemukan: {', '.join(missing_cols)}")
        else:
            # Proses waktu & set index
            df['Tanggal'] = pd.to_datetime(df['Tanggal'])
            df = df.set_index('Tanggal')

            # Simpan df final ke session_state
            st.session_state.data = df

            st.success("File berhasil diunggah dan disimpan!")
            st.dataframe(df)

# Preprocessing Data
elif menu == "Praproses Data":
    st.header("Preprocessing Data")

    # Cek apakah data dari upload sudah tersedia
    if st.session_state.get('data') is None:
        st.warning("Silakan unggah data terlebih dahulu melalui menu 'Upload Data'")
    else:
        # Ambil data dari session_state
        df = st.session_state.data.copy()

        st.subheader("Penanganan Missing Values")
        cols = ['Harga_Telur', 'Harga_Daging_Ayam', 'Harga_Daging_Sapi']

        # Tampilkan jumlah missing sebelum
        missing_before = df[cols].isnull().sum()
        st.write("Missing Values Sebelum Interpolasi:")
        st.bar_chart(missing_before)

        # Interpolasi missing values
        for col in cols:
            df[col] = df[col].interpolate(method='time')

        # Tampilkan jumlah missing setelah
        missing_after = df[cols].isnull().sum()
        st.write("Missing Values Setelah Interpolasi:")
        st.bar_chart(missing_after)

        # Deteksi Outlier
        st.subheader("Deteksi Outlier")
        for col in cols:
            Q1, Q3 = np.percentile(df[col].dropna(), [25, 75])
            IQR = Q3 - Q1
            lower, upper = Q1 - 1.5 * IQR, Q3 + 1.5 * IQR
            outliers = df[(df[col] < lower) | (df[col] > upper)]

            fig, ax = plt.subplots(figsize=(12, 4))
            ax.plot(df.index, df[col], label='Data')
            ax.scatter(outliers.index, outliers[col], color='red', label='Outlier')
            ax.set_title(f'Deteksi Outlier untuk {col}')
            ax.legend()
            st.pyplot(fig)

            st.write(f"Jumlah outlier untuk **{col}**: {len(outliers)}")

        # Simpan df hasil praproses ke session_state untuk digunakan di menu lain
        st.session_state.data_cleaned = df
        st.success("Data selesai dipraproses dan disimpan untuk tahap selanjutnya.")

# Analisis dan Visualisasi
elif menu == "Analisis Deskriptif Dan Visualisasi Data":
    st.header("Analisis Deskriptif Dan Visualisasi Data")
    if st.session_state.data_cleaned is None:
        st.warning("Silakan unggah data terlebih dahulu")
    else:
        df = st.session_state.data_cleaned.copy()
        st.subheader("Data Analisis")
        st.dataframe(df)

        st.subheader("Visualisasi Data")
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.plot(df.index, df['Harga_Telur'], label='Harga Telur', color='blue')
        ax.plot(df.index, df['Harga_Daging_Ayam'], label='Harga Daging Ayam', color='green')
        ax.plot(df.index, df['Harga_Daging_Sapi'], label='Harga Daging Sapi', color='red')
        ax.set_title('Visualisasi Harga Telur, Daging Ayam, dan Daging Sapi')
        ax.legend()
        st.pyplot(fig)

        st.subheader("Statistika Deskriptif")
        df['Tahun'] = df.index.year
        selected_cols = ['Harga_Telur', 'Harga_Daging_Ayam', 'Harga_Daging_Sapi']
        desc = df.groupby('Tahun')[selected_cols].describe()
        if isinstance(desc.columns, pd.MultiIndex):
            desc = desc.loc[:, desc.columns.get_level_values(1) != 'count']
        st.dataframe(desc)


# Pemodelan ARIMAX
elif menu == "Pemodelan Hybrid ARIMAX-LSTM":

    def mape(y_true, y_pred):
      return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

    st.header("Pemodelan ARIMAX")
    if st.session_state.data is None:
        st.warning("Silakan unggah data terlebih dahulu")
    else:
        df = st.session_state.data_cleaned.copy()

        st.subheader("Pembagian Train-Test")
        train = df[:-10]
        test = df[-10:]
        train_len = len(train)
        test_len = len(test)

        labels = ['Train', 'Test']
        values = [train_len, test_len]
        colors = ['skyblue', 'salmon']

        plt.figure(figsize=(3, 3))
        plt.bar(labels, values, color=colors)
        plt.title('Jumlah Baris Data Train dan Test')
        plt.ylabel('Jumlah Baris')
        plt.grid(axis='y', linestyle='--', alpha=0.7)

        for i, v in enumerate(values):
            plt.text(i, v + 1, str(v), ha='center', fontweight='bold')

        plt.tight_layout()
        plt.show()
        st.pyplot(plt)

        st.subheader("Uji Stasioneritas ADF")
        adf_result = adfuller(train['Harga_Telur'])
        adf_df = pd.DataFrame({
            'Metric': ['ADF Statistic', 'p-value', 'Is Stationary?'],
            'Value': [adf_result[0], adf_result[1], 'Ya' if adf_result[1] <= 0.05 else 'Tidak']
        })
        st.dataframe(adf_df)

        st.subheader("Transformasi Box-Cox")
        transformed, lmbda = stats.boxcox(train['Harga_Telur'])
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
        ax1.plot(train['Harga_Telur'])
        ax1.set_title("Sebelum Transformasi")
        ax2.plot(transformed)
        ax2.set_title("Setelah Box-Cox")
        st.pyplot(fig)

        st.subheader("Visualisasi Plot ACF dan PACF")
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6))
        plot_acf(transformed, ax=ax1)
        plot_pacf(transformed, ax=ax2)
        st.pyplot(fig)

        st.subheader("Variabel Target dan Variabel Eksogen")
        y_train = train['Harga_Telur']
        y_test = test['Harga_Telur']
        x_train = train[['Harga_Daging_Ayam', 'Harga_Daging_Sapi', 'Libur_Nasional']]
        x_test = test[['Harga_Daging_Ayam', 'Harga_Daging_Sapi', 'Libur_Nasional']]
        st.write("**Variabel Target (y):**")
        st.dataframe(y_train.reset_index())
        st.write("**Variabel Eksogen (x)**")
        st.dataframe(x_train.reset_index())

        st.subheader("Pemodelan ARIMAX")
        model = SARIMAX(endog=y_train,exog=x_train,order=[2,0,0])
        results = model.fit()
        results.summary()
        st.text(results.summary())

        st.subheader("Hasil Prediksi ARIMAX")
        forecast_arimax = results.forecast(steps=len(y_test), exog=x_test)
        st.dataframe(forecast_arimax)

        st.subheader("Visualisasi Grafik Data Asli VS Data Prediksi ARIMAX")
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(y_test.index, y_test, label="Aktual", color="blue")
        ax.plot(y_test.index, forecast_arimax, label="Prediksi", linestyle="--", color="red")
        ax.legend()
        st.pyplot(fig)

        nilai_mape = mape(y_test, forecast_arimax)
        st.success(f"MAPE ARIMAX: {nilai_mape:.2f}%")
        # === Residual dari ARIMAX ===
        residuals_train = pd.DataFrame(results.resid, columns=['Residual'])
        predictions_test = results.forecast(steps=len(y_test), exog=x_test)
        residuals_test = pd.DataFrame(y_test - predictions_test, columns=['Residual'])

        # Gabungkan residual train dan test
        residuals_combined = pd.concat([residuals_train, residuals_test], axis=0).reset_index(drop=True)

        # === Visualisasi Residual ARIMAX ===
        st.subheader("**Visualisasi Residual ARIMAX**")
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(residuals_combined, label="Residual", color="blue")
        ax.set_title("Plot Residual ARIMAX")
        ax.set_ylabel("Residual")
        ax.grid(True)
        st.pyplot(fig)

        # === Preprocessing Residual untuk LSTM ===
        st.subheader("Pemodelan LSTM terhadap Residual")

        # Scaling residuals
        scaler = MinMaxScaler()
        scaled = scaler.fit_transform(residuals_combined.values)

        st.write("**Residual (Scaled)**")
        st.dataframe(pd.DataFrame(scaled, columns=['Scaled Residual']))

        # Pembagian data train dan test untuk LSTM
        test_size = 20  # Sesuaikan jika perlu
        train_lstm = scaled[:-test_size]
        test_lstm = scaled[-test_size:]

        # Fungsi pembentukan sequence
        seq_length = 10
        def create_sequences(data, seq_length):
            X, y = [], []
            for i in range(seq_length, len(data)):
                X.append(data[i-seq_length:i, 0])
                y.append(data[i, 0])
            return np.array(X), np.array(y)

        # Membuat sequence
        X_train, Y_train = create_sequences(train_lstm, seq_length)
        X_test, Y_test = create_sequences(test_lstm, seq_length)

        # Reshape untuk input LSTM
        X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
        X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

        st.subheader("**Bentuk Data Setelah Reshape untuk LSTM**")
        st.write(f"X_train shape: {X_train.shape}")
        st.write(f"X_test shape: {X_test.shape}")

        # === Load Model LSTM ===
        model_lstm = load_model("best_LSTM32ADAM.h5")

        # Prediksi residual dengan LSTM
        y_pred_scaled = []
        input_seq = X_test[0]

        for _ in range(len(X_test)):
            pred = model_lstm.predict(input_seq.reshape(1, seq_length, 1), verbose=0)
            y_pred_scaled.append(pred[0][0])
            input_seq = np.append(input_seq[1:], pred[0][0]).reshape(seq_length, 1)

        # Inverse transform hasil prediksi
        y_pred_inv = scaler.inverse_transform(np.array(y_pred_scaled).reshape(-1, 1))

        st.write("**Hasil Prediksi Residual LSTM (Setelah Inversi)**")
        st.dataframe(pd.DataFrame(y_pred_inv, columns=["Prediksi Residual"]))

        # === Prediksi Hybrid ARIMAX + LSTM ===
        hybrid_pred = predictions_test.values + y_pred_inv.flatten()

        st.subheader("Hybrid ARIMAX-LSTM")
        st.write("**Hasil Prediksi Hybrid ARIMAX-LSTM**")
        st.dataframe(pd.DataFrame(hybrid_pred, index=y_test.index, columns=["Hybrid Prediksi"]))

        # === Visualisasi Perbandingan ===
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(y_test.index, y_test, label="Aktual", color="blue")
        ax.plot(y_test.index, predictions_test, label="ARIMAX", linestyle="--", color="green")
        ax.plot(y_test.index, hybrid_pred, label="Hybrid ARIMAX-LSTM", linestyle="-.", color="red")
        ax.set_title("Visualisasi Perbandingan Prediksi")
        ax.legend()
        ax.grid(True)
        st.write("**Perbandingan Prediksi Asli, ARIMAX, dan Hybrid**")
        st.pyplot(fig)

        # === Evaluasi Hybrid ===
        nilai_mape = mape(y_test, hybrid_pred)
        st.success(f"MAPE Hybrid ARIMAX-LSTM: {nilai_mape:.2f}%")
        st.info("Prediksi selesai.")

elif menu == "Prediksi Masa Depan":
  st.header("Prediksi Masa Depan")
  uploaded_file = st.file_uploader(
      "Upload Data Varibel Eksogen Yang Sudah Diketahui Dengan kolom: Tanggal, Harga_Daging_Ayam, Harga_Daging_Sapi, Libur_Nasional",
      type=['xlsx'],
      help="Format harus mengandung kolom: Tanggal, Harga_Telur, Harga_Daging_Ayam, Harga_Daging_Sapi, Libur_Nasional"
  )

  if uploaded_file is not None:
      try:
          if uploaded_file.name.endswith('.xlsx'):
              df_baru = pd.read_excel(uploaded_file)
              st.success("File berhasil diunggah!")
          else:
              st.error("Hanya file .xlsx yang diperbolehkan.")

          required_cols = ['Tanggal', 'Harga_Daging_Ayam', 'Harga_Daging_Sapi', 'Libur_Nasional']
          missing_cols = [col for col in required_cols if col not in df_baru.columns]

          if missing_cols:
              st.error(f"Kolom yang diperlukan tidak ditemukan: {', '.join(missing_cols)}")
          else:
              if st.button("üîç Peramalan Harga Telur dengan Hybrid ARIMAX-LSTM"):
                  with st.spinner("Memproses prediksi..."):
                      df_baru = df_baru.set_index('Tanggal')
                      exog_forecast = df_baru[['Harga_Daging_Ayam', 'Harga_Daging_Sapi', 'Libur_Nasional']]
                      seq_length = 10

                      # Load ARIMAX
                      model_arimax = joblib.load("best_ARIMAX200fix.pkl")
                      arimax_pred = model_arimax.forecast(steps=len(df_baru), exog=exog_forecast)
                      arimax_pred.index = df_baru.index

                      # Load model LSTM
                      model_lstm = load_model("best_LSTM32ADAM.h5")

                      # Dummy residual untuk memulai LSTM
                      dummy_residual = np.zeros((seq_length, 1))
                      scaler = MinMaxScaler()
                      dummy_scaled = scaler.fit_transform(dummy_residual)
                      input_seq = dummy_scaled.reshape(seq_length, 1)

                      y_pred = []

                      for i in range(len(df_baru)):
                          pred = model_lstm.predict(input_seq.reshape(1, seq_length, 1))
                          y_pred.append(pred[0][0])

                          # Tambahkan prediksi ke input dan geser window
                          input_seq = np.append(input_seq[1:], pred[0][0])

                      y_pred_inv1 = scaler.inverse_transform(np.array(y_pred).reshape(-1,1)).flatten()
                      hybrid_forecast1 = arimax_pred + y_pred_inv1

                      # Hasil Prediksi
                      df_baru['Peramalan_Harga_Telur'] = hybrid_forecast1
                      st.subheader("Hasil Peramalan Harga Telur")
                      st.dataframe(df_baru)

                      st.success("Peramalan selesai.")
      except Exception as e:
          st.error(f"Error membaca file: {str(e)}")
  else:
      st.warning("Silakan upload file data terlebih dahulu.")